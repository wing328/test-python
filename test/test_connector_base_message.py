# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import openapi_client
from openapi_client.model.connector_auth_message import ConnectorAuthMessage
from openapi_client.model.connector_base_message_all_of import ConnectorBaseMessageAllOf
from openapi_client.model.connector_close_stream_message import ConnectorCloseStreamMessage
from openapi_client.model.connector_command_control_message import ConnectorCommandControlMessage
from openapi_client.model.connector_command_terminal_stream import ConnectorCommandTerminalStream
from openapi_client.model.connector_fetch_stream_message import ConnectorFetchStreamMessage
from openapi_client.model.connector_file_message import ConnectorFileMessage
from openapi_client.model.connector_http_request import ConnectorHttpRequest
from openapi_client.model.connector_ssh_config import ConnectorSshConfig
from openapi_client.model.connector_ssh_message import ConnectorSshMessage
from openapi_client.model.connector_start_stream import ConnectorStartStream
from openapi_client.model.connector_start_stream_from_device import ConnectorStartStreamFromDevice
from openapi_client.model.connector_stream_acknowledge import ConnectorStreamAcknowledge
from openapi_client.model.connector_stream_input import ConnectorStreamInput
from openapi_client.model.connector_stream_keepalive import ConnectorStreamKeepalive
from openapi_client.model.connector_stream_message import ConnectorStreamMessage
from openapi_client.model.connector_xml_api_message import ConnectorXmlApiMessage
from openapi_client.model.imcconnector_web_ui_message import ImcconnectorWebUiMessage
from openapi_client.model.mo_base_complex_type import MoBaseComplexType
from openapi_client.model.ucsdconnector_rest_client_message import UcsdconnectorRestClientMessage
from openapi_client.model.workflow_file_transfer import WorkflowFileTransfer
from openapi_client.model.workflow_ssh_cmd import WorkflowSshCmd
from openapi_client.model.workflow_ssh_config import WorkflowSshConfig
globals()['ConnectorAuthMessage'] = ConnectorAuthMessage
globals()['ConnectorBaseMessageAllOf'] = ConnectorBaseMessageAllOf
globals()['ConnectorCloseStreamMessage'] = ConnectorCloseStreamMessage
globals()['ConnectorCommandControlMessage'] = ConnectorCommandControlMessage
globals()['ConnectorCommandTerminalStream'] = ConnectorCommandTerminalStream
globals()['ConnectorFetchStreamMessage'] = ConnectorFetchStreamMessage
globals()['ConnectorFileMessage'] = ConnectorFileMessage
globals()['ConnectorHttpRequest'] = ConnectorHttpRequest
globals()['ConnectorSshConfig'] = ConnectorSshConfig
globals()['ConnectorSshMessage'] = ConnectorSshMessage
globals()['ConnectorStartStream'] = ConnectorStartStream
globals()['ConnectorStartStreamFromDevice'] = ConnectorStartStreamFromDevice
globals()['ConnectorStreamAcknowledge'] = ConnectorStreamAcknowledge
globals()['ConnectorStreamInput'] = ConnectorStreamInput
globals()['ConnectorStreamKeepalive'] = ConnectorStreamKeepalive
globals()['ConnectorStreamMessage'] = ConnectorStreamMessage
globals()['ConnectorXmlApiMessage'] = ConnectorXmlApiMessage
globals()['ImcconnectorWebUiMessage'] = ImcconnectorWebUiMessage
globals()['MoBaseComplexType'] = MoBaseComplexType
globals()['UcsdconnectorRestClientMessage'] = UcsdconnectorRestClientMessage
globals()['WorkflowFileTransfer'] = WorkflowFileTransfer
globals()['WorkflowSshCmd'] = WorkflowSshCmd
globals()['WorkflowSshConfig'] = WorkflowSshConfig
from openapi_client.model.connector_base_message import ConnectorBaseMessage


class TestConnectorBaseMessage(unittest.TestCase):
    """ConnectorBaseMessage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testConnectorBaseMessage(self):
        """Test ConnectorBaseMessage"""
        # FIXME: construct object with mandatory attributes with example values
        # model = ConnectorBaseMessage()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
