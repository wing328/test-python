# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import openapi_client
from openapi_client.model.boot_device_base_all_of import BootDeviceBaseAllOf
from openapi_client.model.boot_iscsi import BootIscsi
from openapi_client.model.boot_local_cdd import BootLocalCdd
from openapi_client.model.boot_local_disk import BootLocalDisk
from openapi_client.model.boot_nvme import BootNvme
from openapi_client.model.boot_pch_storage import BootPchStorage
from openapi_client.model.boot_pxe import BootPxe
from openapi_client.model.boot_san import BootSan
from openapi_client.model.boot_sd_card import BootSdCard
from openapi_client.model.boot_uefi_shell import BootUefiShell
from openapi_client.model.boot_usb import BootUsb
from openapi_client.model.boot_virtual_media import BootVirtualMedia
from openapi_client.model.mo_base_complex_type import MoBaseComplexType
globals()['BootDeviceBaseAllOf'] = BootDeviceBaseAllOf
globals()['BootIscsi'] = BootIscsi
globals()['BootLocalCdd'] = BootLocalCdd
globals()['BootLocalDisk'] = BootLocalDisk
globals()['BootNvme'] = BootNvme
globals()['BootPchStorage'] = BootPchStorage
globals()['BootPxe'] = BootPxe
globals()['BootSan'] = BootSan
globals()['BootSdCard'] = BootSdCard
globals()['BootUefiShell'] = BootUefiShell
globals()['BootUsb'] = BootUsb
globals()['BootVirtualMedia'] = BootVirtualMedia
globals()['MoBaseComplexType'] = MoBaseComplexType
from openapi_client.model.boot_device_base import BootDeviceBase


class TestBootDeviceBase(unittest.TestCase):
    """BootDeviceBase unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testBootDeviceBase(self):
        """Test BootDeviceBase"""
        # FIXME: construct object with mandatory attributes with example values
        # model = BootDeviceBase()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
