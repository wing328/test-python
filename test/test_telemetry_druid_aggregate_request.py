# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import openapi_client
from openapi_client.model.telemetry_druid_aggregator import TelemetryDruidAggregator
from openapi_client.model.telemetry_druid_data_source import TelemetryDruidDataSource
from openapi_client.model.telemetry_druid_data_source_metadata_request import TelemetryDruidDataSourceMetadataRequest
from openapi_client.model.telemetry_druid_default_limit_spec import TelemetryDruidDefaultLimitSpec
from openapi_client.model.telemetry_druid_dimension_spec import TelemetryDruidDimensionSpec
from openapi_client.model.telemetry_druid_filter import TelemetryDruidFilter
from openapi_client.model.telemetry_druid_granularity import TelemetryDruidGranularity
from openapi_client.model.telemetry_druid_group_by_request import TelemetryDruidGroupByRequest
from openapi_client.model.telemetry_druid_having_filter import TelemetryDruidHavingFilter
from openapi_client.model.telemetry_druid_post_aggregator import TelemetryDruidPostAggregator
from openapi_client.model.telemetry_druid_query_context import TelemetryDruidQueryContext
from openapi_client.model.telemetry_druid_scan_request import TelemetryDruidScanRequest
from openapi_client.model.telemetry_druid_segment_metadata_request import TelemetryDruidSegmentMetadataRequest
from openapi_client.model.telemetry_druid_time_boundary_request import TelemetryDruidTimeBoundaryRequest
from openapi_client.model.telemetry_druid_time_series_request import TelemetryDruidTimeSeriesRequest
from openapi_client.model.telemetry_druid_top_n_metric_spec import TelemetryDruidTopNMetricSpec
from openapi_client.model.telemetry_druid_top_n_request import TelemetryDruidTopNRequest
globals()['TelemetryDruidAggregator'] = TelemetryDruidAggregator
globals()['TelemetryDruidDataSource'] = TelemetryDruidDataSource
globals()['TelemetryDruidDataSourceMetadataRequest'] = TelemetryDruidDataSourceMetadataRequest
globals()['TelemetryDruidDefaultLimitSpec'] = TelemetryDruidDefaultLimitSpec
globals()['TelemetryDruidDimensionSpec'] = TelemetryDruidDimensionSpec
globals()['TelemetryDruidFilter'] = TelemetryDruidFilter
globals()['TelemetryDruidGranularity'] = TelemetryDruidGranularity
globals()['TelemetryDruidGroupByRequest'] = TelemetryDruidGroupByRequest
globals()['TelemetryDruidHavingFilter'] = TelemetryDruidHavingFilter
globals()['TelemetryDruidPostAggregator'] = TelemetryDruidPostAggregator
globals()['TelemetryDruidQueryContext'] = TelemetryDruidQueryContext
globals()['TelemetryDruidScanRequest'] = TelemetryDruidScanRequest
globals()['TelemetryDruidSegmentMetadataRequest'] = TelemetryDruidSegmentMetadataRequest
globals()['TelemetryDruidTimeBoundaryRequest'] = TelemetryDruidTimeBoundaryRequest
globals()['TelemetryDruidTimeSeriesRequest'] = TelemetryDruidTimeSeriesRequest
globals()['TelemetryDruidTopNMetricSpec'] = TelemetryDruidTopNMetricSpec
globals()['TelemetryDruidTopNRequest'] = TelemetryDruidTopNRequest
from openapi_client.model.telemetry_druid_aggregate_request import TelemetryDruidAggregateRequest


class TestTelemetryDruidAggregateRequest(unittest.TestCase):
    """TelemetryDruidAggregateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testTelemetryDruidAggregateRequest(self):
        """Test TelemetryDruidAggregateRequest"""
        # FIXME: construct object with mandatory attributes with example values
        # model = TelemetryDruidAggregateRequest()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
