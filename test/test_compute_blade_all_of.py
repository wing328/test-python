# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import openapi_client
from openapi_client.model.adapter_unit_relationship import AdapterUnitRelationship
from openapi_client.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
from openapi_client.model.bios_unit_relationship import BiosUnitRelationship
from openapi_client.model.compute_board_relationship import ComputeBoardRelationship
from openapi_client.model.equipment_chassis_relationship import EquipmentChassisRelationship
from openapi_client.model.equipment_io_expander_relationship import EquipmentIoExpanderRelationship
from openapi_client.model.equipment_locator_led_relationship import EquipmentLocatorLedRelationship
from openapi_client.model.graphics_card_relationship import GraphicsCardRelationship
from openapi_client.model.inventory_device_info_relationship import InventoryDeviceInfoRelationship
from openapi_client.model.inventory_generic_inventory_holder_relationship import InventoryGenericInventoryHolderRelationship
from openapi_client.model.inventory_uem_connection_relationship import InventoryUemConnectionRelationship
from openapi_client.model.management_controller_relationship import ManagementControllerRelationship
from openapi_client.model.memory_array_relationship import MemoryArrayRelationship
from openapi_client.model.pci_device_relationship import PciDeviceRelationship
from openapi_client.model.processor_unit_relationship import ProcessorUnitRelationship
from openapi_client.model.storage_controller_relationship import StorageControllerRelationship
from openapi_client.model.storage_enclosure_relationship import StorageEnclosureRelationship
from openapi_client.model.top_system_relationship import TopSystemRelationship
globals()['AdapterUnitRelationship'] = AdapterUnitRelationship
globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
globals()['BiosUnitRelationship'] = BiosUnitRelationship
globals()['ComputeBoardRelationship'] = ComputeBoardRelationship
globals()['EquipmentChassisRelationship'] = EquipmentChassisRelationship
globals()['EquipmentIoExpanderRelationship'] = EquipmentIoExpanderRelationship
globals()['EquipmentLocatorLedRelationship'] = EquipmentLocatorLedRelationship
globals()['GraphicsCardRelationship'] = GraphicsCardRelationship
globals()['InventoryDeviceInfoRelationship'] = InventoryDeviceInfoRelationship
globals()['InventoryGenericInventoryHolderRelationship'] = InventoryGenericInventoryHolderRelationship
globals()['InventoryUemConnectionRelationship'] = InventoryUemConnectionRelationship
globals()['ManagementControllerRelationship'] = ManagementControllerRelationship
globals()['MemoryArrayRelationship'] = MemoryArrayRelationship
globals()['PciDeviceRelationship'] = PciDeviceRelationship
globals()['ProcessorUnitRelationship'] = ProcessorUnitRelationship
globals()['StorageControllerRelationship'] = StorageControllerRelationship
globals()['StorageEnclosureRelationship'] = StorageEnclosureRelationship
globals()['TopSystemRelationship'] = TopSystemRelationship
from openapi_client.model.compute_blade_all_of import ComputeBladeAllOf


class TestComputeBladeAllOf(unittest.TestCase):
    """ComputeBladeAllOf unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testComputeBladeAllOf(self):
        """Test ComputeBladeAllOf"""
        # FIXME: construct object with mandatory attributes with example values
        # model = ComputeBladeAllOf()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
