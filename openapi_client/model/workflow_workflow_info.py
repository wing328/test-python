# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.display_names import DisplayNames
    from openapi_client.model.fabric_switch_profile_relationship import FabricSwitchProfileRelationship
    from openapi_client.model.hyperflex_cluster_profile_relationship import HyperflexClusterProfileRelationship
    from openapi_client.model.iam_account_relationship import IamAccountRelationship
    from openapi_client.model.iam_permission_relationship import IamPermissionRelationship
    from openapi_client.model.mo_base_mo import MoBaseMo
    from openapi_client.model.mo_base_mo_relationship import MoBaseMoRelationship
    from openapi_client.model.mo_tag import MoTag
    from openapi_client.model.mo_version_context import MoVersionContext
    from openapi_client.model.organization_organization_relationship import OrganizationOrganizationRelationship
    from openapi_client.model.workflow_message import WorkflowMessage
    from openapi_client.model.workflow_pending_dynamic_workflow_info_relationship import WorkflowPendingDynamicWorkflowInfoRelationship
    from openapi_client.model.workflow_task_info_relationship import WorkflowTaskInfoRelationship
    from openapi_client.model.workflow_workflow_definition_relationship import WorkflowWorkflowDefinitionRelationship
    from openapi_client.model.workflow_workflow_info_all_of import WorkflowWorkflowInfoAllOf
    from openapi_client.model.workflow_workflow_info_properties import WorkflowWorkflowInfoProperties
    globals()['DisplayNames'] = DisplayNames
    globals()['FabricSwitchProfileRelationship'] = FabricSwitchProfileRelationship
    globals()['HyperflexClusterProfileRelationship'] = HyperflexClusterProfileRelationship
    globals()['IamAccountRelationship'] = IamAccountRelationship
    globals()['IamPermissionRelationship'] = IamPermissionRelationship
    globals()['MoBaseMo'] = MoBaseMo
    globals()['MoBaseMoRelationship'] = MoBaseMoRelationship
    globals()['MoTag'] = MoTag
    globals()['MoVersionContext'] = MoVersionContext
    globals()['OrganizationOrganizationRelationship'] = OrganizationOrganizationRelationship
    globals()['WorkflowMessage'] = WorkflowMessage
    globals()['WorkflowPendingDynamicWorkflowInfoRelationship'] = WorkflowPendingDynamicWorkflowInfoRelationship
    globals()['WorkflowTaskInfoRelationship'] = WorkflowTaskInfoRelationship
    globals()['WorkflowWorkflowDefinitionRelationship'] = WorkflowWorkflowDefinitionRelationship
    globals()['WorkflowWorkflowInfoAllOf'] = WorkflowWorkflowInfoAllOf
    globals()['WorkflowWorkflowInfoProperties'] = WorkflowWorkflowInfoProperties


class WorkflowWorkflowInfo(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('action',): {
            'NONE': "None",
            'CREATE': "Create",
            'START': "Start",
            'PAUSE': "Pause",
            'RESUME': "Resume",
            'RETRY': "Retry",
            'RETRYFAILED': "RetryFailed",
            'CANCEL': "Cancel",
        },
        ('last_action',): {
            'NONE': "None",
            'CREATE': "Create",
            'START': "Start",
            'PAUSE': "Pause",
            'RESUME': "Resume",
            'RETRY': "Retry",
            'RETRYFAILED': "RetryFailed",
            'CANCEL': "Cancel",
        },
        ('pause_reason',): {
            'NONE': "None",
            'TASKWITHWARNING': "TaskWithWarning",
        },
        ('wait_reason',): {
            'NONE': "None",
            'GATHERTASKS': "GatherTasks",
            'DUPLICATE': "Duplicate",
            'RATELIMIT': "RateLimit",
            'WAITTASK': "WaitTask",
            'PENDINGRETRYFAILED': "PendingRetryFailed",
        },
        ('workflow_meta_type',): {
            'SYSTEMDEFINED': "SystemDefined",
            'USERDEFINED': "UserDefined",
            'DYNAMIC': "Dynamic",
        },
    }

    validations = {
        ('name',): {
            'regex': {
                'pattern': r'^[^:]{1,92}$',  # noqa: E501
            },
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'action': (str,),  # noqa: E501
            'cleanup_time': (datetime,),  # noqa: E501
            'end_time': (datetime,),  # noqa: E501
            'failed_workflow_cleanup_duration': (int,),  # noqa: E501
            'input': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'inst_id': (str,),  # noqa: E501
            'internal': (bool,),  # noqa: E501
            'last_action': (str,),  # noqa: E501
            'message': ([WorkflowMessage],),  # noqa: E501
            'meta_version': (int,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'output': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'pause_reason': (str,),  # noqa: E501
            'progress': (float,),  # noqa: E501
            'properties': (WorkflowWorkflowInfoProperties,),  # noqa: E501
            'retry_from_task_name': (str,),  # noqa: E501
            'src': (str,),  # noqa: E501
            'start_time': (datetime,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'success_workflow_cleanup_duration': (int,),  # noqa: E501
            'trace_id': (str,),  # noqa: E501
            'type': (str,),  # noqa: E501
            'user_id': (str,),  # noqa: E501
            'wait_reason': (str,),  # noqa: E501
            'workflow_ctx': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'workflow_meta_type': (str,),  # noqa: E501
            'workflow_task_count': (int,),  # noqa: E501
            '_0_switch_profile': (FabricSwitchProfileRelationship,),  # noqa: E501
            '_1_cluster_profile': (HyperflexClusterProfileRelationship,),  # noqa: E501
            'account': (IamAccountRelationship,),  # noqa: E501
            'associated_object': (MoBaseMoRelationship,),  # noqa: E501
            'organization': (OrganizationOrganizationRelationship,),  # noqa: E501
            'parent_task_info': (WorkflowTaskInfoRelationship,),  # noqa: E501
            'pending_dynamic_workflow_info': (WorkflowPendingDynamicWorkflowInfoRelationship,),  # noqa: E501
            'permission': (IamPermissionRelationship,),  # noqa: E501
            'task_infos': ([WorkflowTaskInfoRelationship], none_type,),  # noqa: E501
            'workflow_definition': (WorkflowWorkflowDefinitionRelationship,),  # noqa: E501
            'account_moid': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'domain_group_moid': (str,),  # noqa: E501
            'mod_time': (datetime,),  # noqa: E501
            'moid': (str,),  # noqa: E501
            'owners': ([str],),  # noqa: E501
            'shared_scope': (str,),  # noqa: E501
            'tags': ([MoTag],),  # noqa: E501
            'version_context': (MoVersionContext,),  # noqa: E501
            'ancestors': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'parent': (MoBaseMoRelationship,),  # noqa: E501
            'permission_resources': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'display_names': (DisplayNames,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        val = {
        }
        if not val:
            return None
        return {'class_id': val}

    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'action': 'Action',  # noqa: E501
        'cleanup_time': 'CleanupTime',  # noqa: E501
        'end_time': 'EndTime',  # noqa: E501
        'failed_workflow_cleanup_duration': 'FailedWorkflowCleanupDuration',  # noqa: E501
        'input': 'Input',  # noqa: E501
        'inst_id': 'InstId',  # noqa: E501
        'internal': 'Internal',  # noqa: E501
        'last_action': 'LastAction',  # noqa: E501
        'message': 'Message',  # noqa: E501
        'meta_version': 'MetaVersion',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'output': 'Output',  # noqa: E501
        'pause_reason': 'PauseReason',  # noqa: E501
        'progress': 'Progress',  # noqa: E501
        'properties': 'Properties',  # noqa: E501
        'retry_from_task_name': 'RetryFromTaskName',  # noqa: E501
        'src': 'Src',  # noqa: E501
        'start_time': 'StartTime',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'success_workflow_cleanup_duration': 'SuccessWorkflowCleanupDuration',  # noqa: E501
        'trace_id': 'TraceId',  # noqa: E501
        'type': 'Type',  # noqa: E501
        'user_id': 'UserId',  # noqa: E501
        'wait_reason': 'WaitReason',  # noqa: E501
        'workflow_ctx': 'WorkflowCtx',  # noqa: E501
        'workflow_meta_type': 'WorkflowMetaType',  # noqa: E501
        'workflow_task_count': 'WorkflowTaskCount',  # noqa: E501
        '_0_switch_profile': '_0_SwitchProfile',  # noqa: E501
        '_1_cluster_profile': '_1_ClusterProfile',  # noqa: E501
        'account': 'Account',  # noqa: E501
        'associated_object': 'AssociatedObject',  # noqa: E501
        'organization': 'Organization',  # noqa: E501
        'parent_task_info': 'ParentTaskInfo',  # noqa: E501
        'pending_dynamic_workflow_info': 'PendingDynamicWorkflowInfo',  # noqa: E501
        'permission': 'Permission',  # noqa: E501
        'task_infos': 'TaskInfos',  # noqa: E501
        'workflow_definition': 'WorkflowDefinition',  # noqa: E501
        'account_moid': 'AccountMoid',  # noqa: E501
        'create_time': 'CreateTime',  # noqa: E501
        'domain_group_moid': 'DomainGroupMoid',  # noqa: E501
        'mod_time': 'ModTime',  # noqa: E501
        'moid': 'Moid',  # noqa: E501
        'owners': 'Owners',  # noqa: E501
        'shared_scope': 'SharedScope',  # noqa: E501
        'tags': 'Tags',  # noqa: E501
        'version_context': 'VersionContext',  # noqa: E501
        'ancestors': 'Ancestors',  # noqa: E501
        'parent': 'Parent',  # noqa: E501
        'permission_resources': 'PermissionResources',  # noqa: E501
        'display_names': 'DisplayNames',  # noqa: E501
    }

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, class_id, object_type, *args, **kwargs):  # noqa: E501
        """WorkflowWorkflowInfo - a model defined in OpenAPI

        Args:
            class_id (str): The concrete type of this complex type. Its value must be the same as the &#39;objectType&#39; property. The OpenAPI document references this property as a discriminator value.
            object_type (str): The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action (str): The action of the workflow such as start, cancel, retry, pause.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            cleanup_time (datetime): The time when the workflow info will be removed from database.. [optional]  # noqa: E501
            end_time (datetime): The time when the workflow reached a final state.. [optional]  # noqa: E501
            failed_workflow_cleanup_duration (int): The duration in hours after which the workflow info for failed, terminated or timed out workflow will be removed from database.. [optional]  # noqa: E501
            input (bool, date, datetime, dict, float, int, list, str, none_type): All the given inputs for the workflow.. [optional]  # noqa: E501
            inst_id (str): A workflow instance Id which is the unique identified for the workflow execution.. [optional]  # noqa: E501
            internal (bool): Denotes if this workflow is internal and should be hidden from user view of running workflows.. [optional]  # noqa: E501
            last_action (str): The last action that was issued on the workflow is saved in this field.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            message ([WorkflowMessage]): [optional]  # noqa: E501
            meta_version (int): Version of the workflow metadata for which this workflow execution was started.. [optional]  # noqa: E501
            name (str): A name of the workflow execution instance.. [optional]  # noqa: E501
            output (bool, date, datetime, dict, float, int, list, str, none_type): All the generated outputs for the workflow.. [optional]  # noqa: E501
            pause_reason (str): Denotes the reason workflow is in paused status.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            progress (float): This field indicates percentage of workflow task execution.. [optional]  # noqa: E501
            properties (WorkflowWorkflowInfoProperties): [optional]  # noqa: E501
            retry_from_task_name (str): This field is applicable when Retry action is issued for a workflow which is in a final state. When this field is not specified then the workflow will retry from the start of the workflow. When this field is specified then the workflow will be retried from the specified task. The field should carry the task name which is the unique name of the task within the workflow. The task name must be one of the tasks that completed or failed in the previous run, you cannot retry a workflow from a task which wasn&#39;t run in the previous iteration.. [optional]  # noqa: E501
            src (str): The source microservice name which is the owner for this workflow.. [optional]  # noqa: E501
            start_time (datetime): The time when the workflow was started for execution.. [optional]  # noqa: E501
            status (str): A status of the workflow (RUNNING, WAITING, COMPLETED, TIME_OUT, FAILED).. [optional]  # noqa: E501
            success_workflow_cleanup_duration (int): The duration in hours after which the workflow info for successful workflow will be removed from database.. [optional]  # noqa: E501
            trace_id (str): The trace id to keep track of workflow execution.. [optional]  # noqa: E501
            type (str): A type of the workflow (serverconfig, ansible_monitoring).. [optional]  # noqa: E501
            user_id (str): The user identifier which indicates the user that started this workflow.. [optional]  # noqa: E501
            wait_reason (str): Denotes the reason workflow is in waiting status.. [optional] if omitted the server will use the default value of "None"  # noqa: E501
            workflow_ctx (bool, date, datetime, dict, float, int, list, str, none_type): The workflow context which contains initiator and target information.. [optional]  # noqa: E501
            workflow_meta_type (str): The type of workflow meta. Derived from the workflow meta that is used to launch this workflow instance.. [optional] if omitted the server will use the default value of "SystemDefined"  # noqa: E501
            workflow_task_count (int): Total number of workflow tasks in this workflow.. [optional]  # noqa: E501
            _0_switch_profile (FabricSwitchProfileRelationship): [optional]  # noqa: E501
            _1_cluster_profile (HyperflexClusterProfileRelationship): [optional]  # noqa: E501
            account (IamAccountRelationship): [optional]  # noqa: E501
            associated_object (MoBaseMoRelationship): [optional]  # noqa: E501
            organization (OrganizationOrganizationRelationship): [optional]  # noqa: E501
            parent_task_info (WorkflowTaskInfoRelationship): [optional]  # noqa: E501
            pending_dynamic_workflow_info (WorkflowPendingDynamicWorkflowInfoRelationship): [optional]  # noqa: E501
            permission (IamPermissionRelationship): [optional]  # noqa: E501
            task_infos ([WorkflowTaskInfoRelationship], none_type): An array of relationships to workflowTaskInfo resources.. [optional]  # noqa: E501
            workflow_definition (WorkflowWorkflowDefinitionRelationship): [optional]  # noqa: E501
            account_moid (str): The Account ID for this managed object.. [optional]  # noqa: E501
            create_time (datetime): The time when this managed object was created.. [optional]  # noqa: E501
            domain_group_moid (str): The DomainGroup ID for this managed object.. [optional]  # noqa: E501
            mod_time (datetime): The time when this managed object was last modified.. [optional]  # noqa: E501
            moid (str): The unique identifier of this Managed Object instance.. [optional]  # noqa: E501
            owners ([str]): [optional]  # noqa: E501
            shared_scope (str): Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a &#39;shared&#39; ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.. [optional]  # noqa: E501
            tags ([MoTag]): [optional]  # noqa: E501
            version_context (MoVersionContext): [optional]  # noqa: E501
            ancestors ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            parent (MoBaseMoRelationship): [optional]  # noqa: E501
            permission_resources ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            display_names (DisplayNames): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'class_id': class_id,
            'object_type': object_type,
        }
        # remove args whose value is Null because they are unset
        required_arg_names = list(required_args.keys())
        for required_arg_name in required_arg_names:
            if required_args[required_arg_name] is nulltype.Null:
                del required_args[required_arg_name]
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(
            constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if var_name in unused_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        not self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              MoBaseMo,
              WorkflowWorkflowInfoAllOf,
          ],
          'oneOf': [
          ],
        }
