# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.cond_hcl_status_relationship import CondHclStatusRelationship
    from openapi_client.model.inventory_base_relationship import InventoryBaseRelationship
    globals()['CondHclStatusRelationship'] = CondHclStatusRelationship
    globals()['InventoryBaseRelationship'] = InventoryBaseRelationship


class CondHclStatusDetailAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('hardware_status',): {
            'MISSING-OS-DRIVER-INFO': "Missing-Os-Driver-Info",
            'INCOMPATIBLE-SERVER-WITH-COMPONENT': "Incompatible-Server-With-Component",
            'INCOMPATIBLE-PROCESSOR': "Incompatible-Processor",
            'INCOMPATIBLE-OS-INFO': "Incompatible-Os-Info",
            'INCOMPATIBLE-COMPONENT-MODEL': "Incompatible-Component-Model",
            'INCOMPATIBLE-FIRMWARE': "Incompatible-Firmware",
            'INCOMPATIBLE-DRIVER': "Incompatible-Driver",
            'INCOMPATIBLE-FIRMWARE-DRIVER': "Incompatible-Firmware-Driver",
            'SERVICE-UNAVAILABLE': "Service-Unavailable",
            'SERVICE-ERROR': "Service-Error",
            'UNRECOGNIZED-PROTOCOL': "Unrecognized-Protocol",
            'NOT-EVALUATED': "Not-Evaluated",
            'COMPATIBLE': "Compatible",
        },
        ('reason',): {
            'MISSING-OS-DRIVER-INFO': "Missing-Os-Driver-Info",
            'INCOMPATIBLE-SERVER-WITH-COMPONENT': "Incompatible-Server-With-Component",
            'INCOMPATIBLE-PROCESSOR': "Incompatible-Processor",
            'INCOMPATIBLE-OS-INFO': "Incompatible-Os-Info",
            'INCOMPATIBLE-COMPONENT-MODEL': "Incompatible-Component-Model",
            'INCOMPATIBLE-FIRMWARE': "Incompatible-Firmware",
            'INCOMPATIBLE-DRIVER': "Incompatible-Driver",
            'INCOMPATIBLE-FIRMWARE-DRIVER': "Incompatible-Firmware-Driver",
            'SERVICE-UNAVAILABLE': "Service-Unavailable",
            'SERVICE-ERROR': "Service-Error",
            'UNRECOGNIZED-PROTOCOL': "Unrecognized-Protocol",
            'NOT-EVALUATED': "Not-Evaluated",
            'COMPATIBLE': "Compatible",
        },
        ('software_status',): {
            'MISSING-OS-DRIVER-INFO': "Missing-Os-Driver-Info",
            'INCOMPATIBLE-SERVER-WITH-COMPONENT': "Incompatible-Server-With-Component",
            'INCOMPATIBLE-PROCESSOR': "Incompatible-Processor",
            'INCOMPATIBLE-OS-INFO': "Incompatible-Os-Info",
            'INCOMPATIBLE-COMPONENT-MODEL': "Incompatible-Component-Model",
            'INCOMPATIBLE-FIRMWARE': "Incompatible-Firmware",
            'INCOMPATIBLE-DRIVER': "Incompatible-Driver",
            'INCOMPATIBLE-FIRMWARE-DRIVER': "Incompatible-Firmware-Driver",
            'SERVICE-UNAVAILABLE': "Service-Unavailable",
            'SERVICE-ERROR': "Service-Error",
            'UNRECOGNIZED-PROTOCOL': "Unrecognized-Protocol",
            'NOT-EVALUATED': "Not-Evaluated",
            'COMPATIBLE': "Compatible",
        },
        ('status',): {
            'INCOMPLETE': "Incomplete",
            'NOT-FOUND': "Not-Found",
            'NOT-LISTED': "Not-Listed",
            'VALIDATED': "Validated",
            'NOT-EVALUATED': "Not-Evaluated",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'hardware_status': (str,),  # noqa: E501
            'hcl_cimc_version': (str,),  # noqa: E501
            'hcl_driver_name': (str,),  # noqa: E501
            'hcl_driver_version': (str,),  # noqa: E501
            'hcl_firmware_version': (str,),  # noqa: E501
            'hcl_model': (str,),  # noqa: E501
            'inv_cimc_version': (str,),  # noqa: E501
            'inv_driver_name': (str,),  # noqa: E501
            'inv_driver_version': (str,),  # noqa: E501
            'inv_firmware_version': (str,),  # noqa: E501
            'inv_model': (str,),  # noqa: E501
            'reason': (str,),  # noqa: E501
            'software_status': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'component': (InventoryBaseRelationship,),  # noqa: E501
            'hcl_status': (CondHclStatusRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'hardware_status': 'HardwareStatus',  # noqa: E501
        'hcl_cimc_version': 'HclCimcVersion',  # noqa: E501
        'hcl_driver_name': 'HclDriverName',  # noqa: E501
        'hcl_driver_version': 'HclDriverVersion',  # noqa: E501
        'hcl_firmware_version': 'HclFirmwareVersion',  # noqa: E501
        'hcl_model': 'HclModel',  # noqa: E501
        'inv_cimc_version': 'InvCimcVersion',  # noqa: E501
        'inv_driver_name': 'InvDriverName',  # noqa: E501
        'inv_driver_version': 'InvDriverVersion',  # noqa: E501
        'inv_firmware_version': 'InvFirmwareVersion',  # noqa: E501
        'inv_model': 'InvModel',  # noqa: E501
        'reason': 'Reason',  # noqa: E501
        'software_status': 'SoftwareStatus',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'component': 'Component',  # noqa: E501
        'hcl_status': 'HclStatus',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """CondHclStatusDetailAllOf - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            hardware_status (str): The model is considered as part of the hardware profile for the component. This will provide the HCL validation status for the hardware profile. The reasons can be one of the following \&quot;Incompatible-Server-With-Component\&quot; - the server model and component combination is not listed in HCL \&quot;Incompatible-Firmware\&quot; - The server&#39;s firmware is not listed for this component&#39;s hardware profile \&quot;Incompatible-Component\&quot; - the component&#39;s model is not listed in the HCL \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Not-Evaluated\&quot; - the hardware profile was not evaulated for the component because the server&#39;s hw/sw status is not listed or server is exempted. \&quot;Compatible\&quot; - this component&#39;s hardware profile is listed in the HCL.. [optional] if omitted the server will use the default value of "Missing-Os-Driver-Info"  # noqa: E501
            hcl_cimc_version (str): The current CIMC version for the server normalized for querying HCL data.. [optional]  # noqa: E501
            hcl_driver_name (str): The current driver name of the component we are validating normalized for querying HCL data.. [optional]  # noqa: E501
            hcl_driver_version (str): The current driver version of the component we are validating normalized for querying HCL data.. [optional]  # noqa: E501
            hcl_firmware_version (str): The current firmware version of the component model normalized for querying HCL data.. [optional]  # noqa: E501
            hcl_model (str): The component model we are trying to validate normalized for querying HCL data.. [optional]  # noqa: E501
            inv_cimc_version (str): The current CIMC version for the server as received from inventory.. [optional]  # noqa: E501
            inv_driver_name (str): The current driver name of the component we are validating as received from inventory.. [optional]  # noqa: E501
            inv_driver_version (str): The current driver version of the component we are validating as received from inventory.. [optional]  # noqa: E501
            inv_firmware_version (str): The current firmware version of the component model as received from inventory.. [optional]  # noqa: E501
            inv_model (str): The component model we are trying to validate as received from inventory.. [optional]  # noqa: E501
            reason (str): The reason for the status. The reason can be one of \&quot;Incompatible-Server-With-Component\&quot; - HCL validation has failed because the server model is not validated with this component \&quot;Incompatible-Processor\&quot; - HCL validation has failed because the processor is not validated with this server \&quot;Incompatible-Os-Info\&quot; - HCL validation has failed because the os vendor and version is not validated with this server \&quot;Incompatible-Component-Model\&quot; - HCL validation has failed because the component model is not validated \&quot;Incompatible-Firmware\&quot; - HCL validation has failed because the component or server firmware version is not validated \&quot;Incompatible-Driver\&quot; - HCL validation has failed because the driver version is not validated \&quot;Incompatible-Firmware-Driver\&quot; - HCL validation has failed because the firmware version and driver version is not validated \&quot;Missing-Os-Driver-Info\&quot; - HCL validation was not performed because we are missing os driver information form the inventory \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Service-Error\&quot; - HCL data service is available but an error occured when making the request or parsing the response \&quot;Unrecognized-Protocol\&quot; - This service does not recognize the reason code in the response from the HCL data service \&quot;Compatible\&quot; - this component&#39;s inventory data has \&quot;Validated\&quot; status with the HCL. \&quot;Not-Evaluated\&quot; - The component is not evaluated against the HCL because the server is exempted.. [optional] if omitted the server will use the default value of "Missing-Os-Driver-Info"  # noqa: E501
            software_status (str): The firmware, driver name and driver version are considered as part of the software profile for the component. This will provide the HCL validation status for the software profile. The reasons can be one of the following \&quot;Incompatible-Firmware\&quot; - the component&#39;s firmware is not listed under the server&#39;s hardware and software profile and the component&#39;s hardware profile \&quot;Incompatible-Driver\&quot; - the component&#39;s driver is not listed under the server&#39;s hardware and software profile and the component&#39;s hardware profile \&quot;Incompatible-Firmware-Driver\&quot; - the component&#39;s firmware and driver are not listed under the server&#39;s hardware and software profile and the component&#39;s hardware profile \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). This could be due to HCL data updating \&quot;Not-Evaluated\&quot; - the component&#39;s hardware status was not evaluated because the server&#39;s hardware or software profile is not listed or server is exempted. \&quot;Compatible\&quot; - this component&#39;s hardware profile is listed in the HCL.. [optional] if omitted the server will use the default value of "Missing-Os-Driver-Info"  # noqa: E501
            status (str): The status for the component model, firmware version, driver name, and driver version after validating against the HCL. The status can be one of the following \&quot;Unknown\&quot; - we do not have enough information to evaluate against the HCL data \&quot;Validated\&quot; - we have validated this component against the HCL and it has \&quot;Validated\&quot; status \&quot;Not-Validated\&quot; - we have validated this component against the HCL and it has \&quot;Not-Validated\&quot; status. \&quot;Not-Evaluated\&quot; - The component is not evaluated against the HCL because the server is exempted.. [optional] if omitted the server will use the default value of "Incomplete"  # noqa: E501
            component (InventoryBaseRelationship): [optional]  # noqa: E501
            hcl_status (CondHclStatusRelationship): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
