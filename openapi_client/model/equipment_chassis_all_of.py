# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
    from openapi_client.model.compute_blade_relationship import ComputeBladeRelationship
    from openapi_client.model.equipment_fan_module_relationship import EquipmentFanModuleRelationship
    from openapi_client.model.equipment_io_card_relationship import EquipmentIoCardRelationship
    from openapi_client.model.equipment_locator_led_relationship import EquipmentLocatorLedRelationship
    from openapi_client.model.equipment_psu_control_relationship import EquipmentPsuControlRelationship
    from openapi_client.model.equipment_psu_relationship import EquipmentPsuRelationship
    from openapi_client.model.equipment_system_io_controller_relationship import EquipmentSystemIoControllerRelationship
    from openapi_client.model.inventory_device_info_relationship import InventoryDeviceInfoRelationship
    from openapi_client.model.storage_enclosure_relationship import StorageEnclosureRelationship
    from openapi_client.model.storage_sas_expander_relationship import StorageSasExpanderRelationship
    globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
    globals()['ComputeBladeRelationship'] = ComputeBladeRelationship
    globals()['EquipmentFanModuleRelationship'] = EquipmentFanModuleRelationship
    globals()['EquipmentIoCardRelationship'] = EquipmentIoCardRelationship
    globals()['EquipmentLocatorLedRelationship'] = EquipmentLocatorLedRelationship
    globals()['EquipmentPsuControlRelationship'] = EquipmentPsuControlRelationship
    globals()['EquipmentPsuRelationship'] = EquipmentPsuRelationship
    globals()['EquipmentSystemIoControllerRelationship'] = EquipmentSystemIoControllerRelationship
    globals()['InventoryDeviceInfoRelationship'] = InventoryDeviceInfoRelationship
    globals()['StorageEnclosureRelationship'] = StorageEnclosureRelationship
    globals()['StorageSasExpanderRelationship'] = StorageSasExpanderRelationship


class EquipmentChassisAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('management_mode',): {
            'INTERSIGHTSTANDALONE': "IntersightStandalone",
            'UCSM': "UCSM",
            'INTERSIGHT': "Intersight",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'chassis_id': (int,),  # noqa: E501
            'connection_path': (str,),  # noqa: E501
            'connection_status': (str,),  # noqa: E501
            'description': (str,),  # noqa: E501
            'fault_summary': (int,),  # noqa: E501
            'management_mode': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'oper_state': (str,),  # noqa: E501
            'part_number': (str,),  # noqa: E501
            'pid': (str,),  # noqa: E501
            'platform_type': (str,),  # noqa: E501
            'product_name': (str,),  # noqa: E501
            'sku': (str,),  # noqa: E501
            'vid': (str,),  # noqa: E501
            'blades': ([ComputeBladeRelationship], none_type,),  # noqa: E501
            'fanmodules': ([EquipmentFanModuleRelationship], none_type,),  # noqa: E501
            'inventory_device_info': (InventoryDeviceInfoRelationship,),  # noqa: E501
            'ioms': ([EquipmentIoCardRelationship], none_type,),  # noqa: E501
            'locator_led': (EquipmentLocatorLedRelationship,),  # noqa: E501
            'psu_control': (EquipmentPsuControlRelationship,),  # noqa: E501
            'psus': ([EquipmentPsuRelationship], none_type,),  # noqa: E501
            'registered_device': (AssetDeviceRegistrationRelationship,),  # noqa: E501
            'sasexpanders': ([StorageSasExpanderRelationship], none_type,),  # noqa: E501
            'siocs': ([EquipmentSystemIoControllerRelationship], none_type,),  # noqa: E501
            'storage_enclosures': ([StorageEnclosureRelationship], none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'chassis_id': 'ChassisId',  # noqa: E501
        'connection_path': 'ConnectionPath',  # noqa: E501
        'connection_status': 'ConnectionStatus',  # noqa: E501
        'description': 'Description',  # noqa: E501
        'fault_summary': 'FaultSummary',  # noqa: E501
        'management_mode': 'ManagementMode',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'oper_state': 'OperState',  # noqa: E501
        'part_number': 'PartNumber',  # noqa: E501
        'pid': 'Pid',  # noqa: E501
        'platform_type': 'PlatformType',  # noqa: E501
        'product_name': 'ProductName',  # noqa: E501
        'sku': 'Sku',  # noqa: E501
        'vid': 'Vid',  # noqa: E501
        'blades': 'Blades',  # noqa: E501
        'fanmodules': 'Fanmodules',  # noqa: E501
        'inventory_device_info': 'InventoryDeviceInfo',  # noqa: E501
        'ioms': 'Ioms',  # noqa: E501
        'locator_led': 'LocatorLed',  # noqa: E501
        'psu_control': 'PsuControl',  # noqa: E501
        'psus': 'Psus',  # noqa: E501
        'registered_device': 'RegisteredDevice',  # noqa: E501
        'sasexpanders': 'Sasexpanders',  # noqa: E501
        'siocs': 'Siocs',  # noqa: E501
        'storage_enclosures': 'StorageEnclosures',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """EquipmentChassisAllOf - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            chassis_id (int): The assigned identifier for a chassis.. [optional]  # noqa: E501
            connection_path (str): This field identifies the connectivity path for the chassis enclosure.. [optional]  # noqa: E501
            connection_status (str): This field identifies the connectivity status for the chassis enclosure.. [optional]  # noqa: E501
            description (str): This field is to provide description for chassis model.. [optional]  # noqa: E501
            fault_summary (int): This field summarizes the faults on the chassis enclosure.. [optional]  # noqa: E501
            management_mode (str): The management mode of the blade server chassis.. [optional] if omitted the server will use the default value of "IntersightStandalone"  # noqa: E501
            name (str): This field identifies the name for the chassis enclosure.. [optional]  # noqa: E501
            oper_state (str): This field identifies the Chassis Operational State.. [optional]  # noqa: E501
            part_number (str): Part Number identifier for the chassis enclosure.. [optional]  # noqa: E501
            pid (str): This field identifies the Product ID for the chassis enclosure.. [optional]  # noqa: E501
            platform_type (str): The platform type that the chassis is a part of.. [optional]  # noqa: E501
            product_name (str): This field identifies the Product Name for the chassis enclosure.. [optional]  # noqa: E501
            sku (str): This field identifies the Stock Keeping Unit for the chassis enclosure.. [optional]  # noqa: E501
            vid (str): This field identifies the Vendor ID for the chassis enclosure.. [optional]  # noqa: E501
            blades ([ComputeBladeRelationship], none_type): An array of relationships to computeBlade resources.. [optional]  # noqa: E501
            fanmodules ([EquipmentFanModuleRelationship], none_type): An array of relationships to equipmentFanModule resources.. [optional]  # noqa: E501
            inventory_device_info (InventoryDeviceInfoRelationship): [optional]  # noqa: E501
            ioms ([EquipmentIoCardRelationship], none_type): An array of relationships to equipmentIoCard resources.. [optional]  # noqa: E501
            locator_led (EquipmentLocatorLedRelationship): [optional]  # noqa: E501
            psu_control (EquipmentPsuControlRelationship): [optional]  # noqa: E501
            psus ([EquipmentPsuRelationship], none_type): An array of relationships to equipmentPsu resources.. [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
            sasexpanders ([StorageSasExpanderRelationship], none_type): An array of relationships to storageSasExpander resources.. [optional]  # noqa: E501
            siocs ([EquipmentSystemIoControllerRelationship], none_type): An array of relationships to equipmentSystemIoController resources.. [optional]  # noqa: E501
            storage_enclosures ([StorageEnclosureRelationship], none_type): An array of relationships to storageEnclosure resources.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
