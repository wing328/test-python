# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.adapter_ext_eth_interface import AdapterExtEthInterface
    from openapi_client.model.adapter_host_eth_interface import AdapterHostEthInterface
    from openapi_client.model.adapter_host_fc_interface import AdapterHostFcInterface
    from openapi_client.model.adapter_host_iscsi_interface import AdapterHostIscsiInterface
    from openapi_client.model.adapter_unit import AdapterUnit
    from openapi_client.model.bios_boot_mode import BiosBootMode
    from openapi_client.model.bios_unit import BiosUnit
    from openapi_client.model.boot_device_boot_mode import BootDeviceBootMode
    from openapi_client.model.compute_blade import ComputeBlade
    from openapi_client.model.compute_board import ComputeBoard
    from openapi_client.model.compute_physical import ComputePhysical
    from openapi_client.model.compute_rack_unit import ComputeRackUnit
    from openapi_client.model.compute_server_setting import ComputeServerSetting
    from openapi_client.model.display_names import DisplayNames
    from openapi_client.model.equipment_abstract_device import EquipmentAbstractDevice
    from openapi_client.model.equipment_base import EquipmentBase
    from openapi_client.model.equipment_chassis import EquipmentChassis
    from openapi_client.model.equipment_fan import EquipmentFan
    from openapi_client.model.equipment_fan_module import EquipmentFanModule
    from openapi_client.model.equipment_fex import EquipmentFex
    from openapi_client.model.equipment_io_card import EquipmentIoCard
    from openapi_client.model.equipment_io_card_base import EquipmentIoCardBase
    from openapi_client.model.equipment_io_expander import EquipmentIoExpander
    from openapi_client.model.equipment_locator_led import EquipmentLocatorLed
    from openapi_client.model.equipment_psu import EquipmentPsu
    from openapi_client.model.equipment_psu_control import EquipmentPsuControl
    from openapi_client.model.equipment_rack_enclosure import EquipmentRackEnclosure
    from openapi_client.model.equipment_rack_enclosure_slot import EquipmentRackEnclosureSlot
    from openapi_client.model.equipment_shared_io_module import EquipmentSharedIoModule
    from openapi_client.model.equipment_switch_card import EquipmentSwitchCard
    from openapi_client.model.equipment_system_io_controller import EquipmentSystemIoController
    from openapi_client.model.equipment_tpm import EquipmentTpm
    from openapi_client.model.equipment_transceiver import EquipmentTransceiver
    from openapi_client.model.ether_host_port import EtherHostPort
    from openapi_client.model.ether_network_port import EtherNetworkPort
    from openapi_client.model.ether_physical_port import EtherPhysicalPort
    from openapi_client.model.ether_physical_port_base import EtherPhysicalPortBase
    from openapi_client.model.ether_port_channel import EtherPortChannel
    from openapi_client.model.fault_instance import FaultInstance
    from openapi_client.model.fc_physical_port import FcPhysicalPort
    from openapi_client.model.fc_port_channel import FcPortChannel
    from openapi_client.model.firmware_running_firmware import FirmwareRunningFirmware
    from openapi_client.model.graphics_card import GraphicsCard
    from openapi_client.model.graphics_controller import GraphicsController
    from openapi_client.model.inventory_base_all_of import InventoryBaseAllOf
    from openapi_client.model.inventory_generic_inventory import InventoryGenericInventory
    from openapi_client.model.inventory_generic_inventory_holder import InventoryGenericInventoryHolder
    from openapi_client.model.ls_service_profile import LsServiceProfile
    from openapi_client.model.management_controller import ManagementController
    from openapi_client.model.management_entity import ManagementEntity
    from openapi_client.model.management_interface import ManagementInterface
    from openapi_client.model.memory_abstract_unit import MemoryAbstractUnit
    from openapi_client.model.memory_array import MemoryArray
    from openapi_client.model.memory_persistent_memory_config_result import MemoryPersistentMemoryConfigResult
    from openapi_client.model.memory_persistent_memory_configuration import MemoryPersistentMemoryConfiguration
    from openapi_client.model.memory_persistent_memory_namespace import MemoryPersistentMemoryNamespace
    from openapi_client.model.memory_persistent_memory_namespace_config_result import MemoryPersistentMemoryNamespaceConfigResult
    from openapi_client.model.memory_persistent_memory_region import MemoryPersistentMemoryRegion
    from openapi_client.model.memory_persistent_memory_unit import MemoryPersistentMemoryUnit
    from openapi_client.model.memory_unit import MemoryUnit
    from openapi_client.model.mo_base_mo import MoBaseMo
    from openapi_client.model.mo_base_mo_relationship import MoBaseMoRelationship
    from openapi_client.model.mo_tag import MoTag
    from openapi_client.model.mo_version_context import MoVersionContext
    from openapi_client.model.network_element import NetworkElement
    from openapi_client.model.network_fc_zone_info import NetworkFcZoneInfo
    from openapi_client.model.network_vlan_port_info import NetworkVlanPortInfo
    from openapi_client.model.pci_coprocessor_card import PciCoprocessorCard
    from openapi_client.model.pci_device import PciDevice
    from openapi_client.model.pci_link import PciLink
    from openapi_client.model.pci_switch import PciSwitch
    from openapi_client.model.port_group import PortGroup
    from openapi_client.model.port_interface_base import PortInterfaceBase
    from openapi_client.model.port_mac_binding import PortMacBinding
    from openapi_client.model.port_physical import PortPhysical
    from openapi_client.model.port_sub_group import PortSubGroup
    from openapi_client.model.processor_unit import ProcessorUnit
    from openapi_client.model.security_unit import SecurityUnit
    from openapi_client.model.storage_base_array import StorageBaseArray
    from openapi_client.model.storage_base_array_controller import StorageBaseArrayController
    from openapi_client.model.storage_base_array_disk import StorageBaseArrayDisk
    from openapi_client.model.storage_controller import StorageController
    from openapi_client.model.storage_disk_group import StorageDiskGroup
    from openapi_client.model.storage_enclosure import StorageEnclosure
    from openapi_client.model.storage_enclosure_disk import StorageEnclosureDisk
    from openapi_client.model.storage_enclosure_disk_slot_ep import StorageEnclosureDiskSlotEp
    from openapi_client.model.storage_flex_flash_controller import StorageFlexFlashController
    from openapi_client.model.storage_flex_flash_controller_props import StorageFlexFlashControllerProps
    from openapi_client.model.storage_flex_flash_physical_drive import StorageFlexFlashPhysicalDrive
    from openapi_client.model.storage_flex_flash_virtual_drive import StorageFlexFlashVirtualDrive
    from openapi_client.model.storage_flex_util_controller import StorageFlexUtilController
    from openapi_client.model.storage_flex_util_physical_drive import StorageFlexUtilPhysicalDrive
    from openapi_client.model.storage_flex_util_virtual_drive import StorageFlexUtilVirtualDrive
    from openapi_client.model.storage_item import StorageItem
    from openapi_client.model.storage_physical_disk import StoragePhysicalDisk
    from openapi_client.model.storage_physical_disk_extension import StoragePhysicalDiskExtension
    from openapi_client.model.storage_physical_disk_usage import StoragePhysicalDiskUsage
    from openapi_client.model.storage_pure_array import StoragePureArray
    from openapi_client.model.storage_pure_controller import StoragePureController
    from openapi_client.model.storage_pure_disk import StoragePureDisk
    from openapi_client.model.storage_sas_expander import StorageSasExpander
    from openapi_client.model.storage_sas_port import StorageSasPort
    from openapi_client.model.storage_span import StorageSpan
    from openapi_client.model.storage_vd_member_ep import StorageVdMemberEp
    from openapi_client.model.storage_virtual_drive import StorageVirtualDrive
    from openapi_client.model.storage_virtual_drive_extension import StorageVirtualDriveExtension
    from openapi_client.model.top_system import TopSystem
    globals()['AdapterExtEthInterface'] = AdapterExtEthInterface
    globals()['AdapterHostEthInterface'] = AdapterHostEthInterface
    globals()['AdapterHostFcInterface'] = AdapterHostFcInterface
    globals()['AdapterHostIscsiInterface'] = AdapterHostIscsiInterface
    globals()['AdapterUnit'] = AdapterUnit
    globals()['BiosBootMode'] = BiosBootMode
    globals()['BiosUnit'] = BiosUnit
    globals()['BootDeviceBootMode'] = BootDeviceBootMode
    globals()['ComputeBlade'] = ComputeBlade
    globals()['ComputeBoard'] = ComputeBoard
    globals()['ComputePhysical'] = ComputePhysical
    globals()['ComputeRackUnit'] = ComputeRackUnit
    globals()['ComputeServerSetting'] = ComputeServerSetting
    globals()['DisplayNames'] = DisplayNames
    globals()['EquipmentAbstractDevice'] = EquipmentAbstractDevice
    globals()['EquipmentBase'] = EquipmentBase
    globals()['EquipmentChassis'] = EquipmentChassis
    globals()['EquipmentFan'] = EquipmentFan
    globals()['EquipmentFanModule'] = EquipmentFanModule
    globals()['EquipmentFex'] = EquipmentFex
    globals()['EquipmentIoCard'] = EquipmentIoCard
    globals()['EquipmentIoCardBase'] = EquipmentIoCardBase
    globals()['EquipmentIoExpander'] = EquipmentIoExpander
    globals()['EquipmentLocatorLed'] = EquipmentLocatorLed
    globals()['EquipmentPsu'] = EquipmentPsu
    globals()['EquipmentPsuControl'] = EquipmentPsuControl
    globals()['EquipmentRackEnclosure'] = EquipmentRackEnclosure
    globals()['EquipmentRackEnclosureSlot'] = EquipmentRackEnclosureSlot
    globals()['EquipmentSharedIoModule'] = EquipmentSharedIoModule
    globals()['EquipmentSwitchCard'] = EquipmentSwitchCard
    globals()['EquipmentSystemIoController'] = EquipmentSystemIoController
    globals()['EquipmentTpm'] = EquipmentTpm
    globals()['EquipmentTransceiver'] = EquipmentTransceiver
    globals()['EtherHostPort'] = EtherHostPort
    globals()['EtherNetworkPort'] = EtherNetworkPort
    globals()['EtherPhysicalPort'] = EtherPhysicalPort
    globals()['EtherPhysicalPortBase'] = EtherPhysicalPortBase
    globals()['EtherPortChannel'] = EtherPortChannel
    globals()['FaultInstance'] = FaultInstance
    globals()['FcPhysicalPort'] = FcPhysicalPort
    globals()['FcPortChannel'] = FcPortChannel
    globals()['FirmwareRunningFirmware'] = FirmwareRunningFirmware
    globals()['GraphicsCard'] = GraphicsCard
    globals()['GraphicsController'] = GraphicsController
    globals()['InventoryBaseAllOf'] = InventoryBaseAllOf
    globals()['InventoryGenericInventory'] = InventoryGenericInventory
    globals()['InventoryGenericInventoryHolder'] = InventoryGenericInventoryHolder
    globals()['LsServiceProfile'] = LsServiceProfile
    globals()['ManagementController'] = ManagementController
    globals()['ManagementEntity'] = ManagementEntity
    globals()['ManagementInterface'] = ManagementInterface
    globals()['MemoryAbstractUnit'] = MemoryAbstractUnit
    globals()['MemoryArray'] = MemoryArray
    globals()['MemoryPersistentMemoryConfigResult'] = MemoryPersistentMemoryConfigResult
    globals()['MemoryPersistentMemoryConfiguration'] = MemoryPersistentMemoryConfiguration
    globals()['MemoryPersistentMemoryNamespace'] = MemoryPersistentMemoryNamespace
    globals()['MemoryPersistentMemoryNamespaceConfigResult'] = MemoryPersistentMemoryNamespaceConfigResult
    globals()['MemoryPersistentMemoryRegion'] = MemoryPersistentMemoryRegion
    globals()['MemoryPersistentMemoryUnit'] = MemoryPersistentMemoryUnit
    globals()['MemoryUnit'] = MemoryUnit
    globals()['MoBaseMo'] = MoBaseMo
    globals()['MoBaseMoRelationship'] = MoBaseMoRelationship
    globals()['MoTag'] = MoTag
    globals()['MoVersionContext'] = MoVersionContext
    globals()['NetworkElement'] = NetworkElement
    globals()['NetworkFcZoneInfo'] = NetworkFcZoneInfo
    globals()['NetworkVlanPortInfo'] = NetworkVlanPortInfo
    globals()['PciCoprocessorCard'] = PciCoprocessorCard
    globals()['PciDevice'] = PciDevice
    globals()['PciLink'] = PciLink
    globals()['PciSwitch'] = PciSwitch
    globals()['PortGroup'] = PortGroup
    globals()['PortInterfaceBase'] = PortInterfaceBase
    globals()['PortMacBinding'] = PortMacBinding
    globals()['PortPhysical'] = PortPhysical
    globals()['PortSubGroup'] = PortSubGroup
    globals()['ProcessorUnit'] = ProcessorUnit
    globals()['SecurityUnit'] = SecurityUnit
    globals()['StorageBaseArray'] = StorageBaseArray
    globals()['StorageBaseArrayController'] = StorageBaseArrayController
    globals()['StorageBaseArrayDisk'] = StorageBaseArrayDisk
    globals()['StorageController'] = StorageController
    globals()['StorageDiskGroup'] = StorageDiskGroup
    globals()['StorageEnclosure'] = StorageEnclosure
    globals()['StorageEnclosureDisk'] = StorageEnclosureDisk
    globals()['StorageEnclosureDiskSlotEp'] = StorageEnclosureDiskSlotEp
    globals()['StorageFlexFlashController'] = StorageFlexFlashController
    globals()['StorageFlexFlashControllerProps'] = StorageFlexFlashControllerProps
    globals()['StorageFlexFlashPhysicalDrive'] = StorageFlexFlashPhysicalDrive
    globals()['StorageFlexFlashVirtualDrive'] = StorageFlexFlashVirtualDrive
    globals()['StorageFlexUtilController'] = StorageFlexUtilController
    globals()['StorageFlexUtilPhysicalDrive'] = StorageFlexUtilPhysicalDrive
    globals()['StorageFlexUtilVirtualDrive'] = StorageFlexUtilVirtualDrive
    globals()['StorageItem'] = StorageItem
    globals()['StoragePhysicalDisk'] = StoragePhysicalDisk
    globals()['StoragePhysicalDiskExtension'] = StoragePhysicalDiskExtension
    globals()['StoragePhysicalDiskUsage'] = StoragePhysicalDiskUsage
    globals()['StoragePureArray'] = StoragePureArray
    globals()['StoragePureController'] = StoragePureController
    globals()['StoragePureDisk'] = StoragePureDisk
    globals()['StorageSasExpander'] = StorageSasExpander
    globals()['StorageSasPort'] = StorageSasPort
    globals()['StorageSpan'] = StorageSpan
    globals()['StorageVdMemberEp'] = StorageVdMemberEp
    globals()['StorageVirtualDrive'] = StorageVirtualDrive
    globals()['StorageVirtualDriveExtension'] = StorageVirtualDriveExtension
    globals()['TopSystem'] = TopSystem


class InventoryBase(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'class_id': (str,),  # noqa: E501
            'object_type': (str,),  # noqa: E501
            'device_mo_id': (str,),  # noqa: E501
            'dn': (str,),  # noqa: E501
            'rn': (str,),  # noqa: E501
            'account_moid': (str,),  # noqa: E501
            'create_time': (datetime,),  # noqa: E501
            'domain_group_moid': (str,),  # noqa: E501
            'mod_time': (datetime,),  # noqa: E501
            'moid': (str,),  # noqa: E501
            'owners': ([str],),  # noqa: E501
            'shared_scope': (str,),  # noqa: E501
            'tags': ([MoTag],),  # noqa: E501
            'version_context': (MoVersionContext,),  # noqa: E501
            'ancestors': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'parent': (MoBaseMoRelationship,),  # noqa: E501
            'permission_resources': ([MoBaseMoRelationship], none_type,),  # noqa: E501
            'display_names': (DisplayNames,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        lazy_import()
        val = {
            'adapter.ExtEthInterface': AdapterExtEthInterface,
            'adapter.HostEthInterface': AdapterHostEthInterface,
            'adapter.HostFcInterface': AdapterHostFcInterface,
            'adapter.HostIscsiInterface': AdapterHostIscsiInterface,
            'adapter.Unit': AdapterUnit,
            'bios.BootMode': BiosBootMode,
            'bios.Unit': BiosUnit,
            'boot.DeviceBootMode': BootDeviceBootMode,
            'compute.Blade': ComputeBlade,
            'compute.Board': ComputeBoard,
            'compute.Physical': ComputePhysical,
            'compute.RackUnit': ComputeRackUnit,
            'compute.ServerSetting': ComputeServerSetting,
            'equipment.AbstractDevice': EquipmentAbstractDevice,
            'equipment.Base': EquipmentBase,
            'equipment.Chassis': EquipmentChassis,
            'equipment.Fan': EquipmentFan,
            'equipment.FanModule': EquipmentFanModule,
            'equipment.Fex': EquipmentFex,
            'equipment.IoCard': EquipmentIoCard,
            'equipment.IoCardBase': EquipmentIoCardBase,
            'equipment.IoExpander': EquipmentIoExpander,
            'equipment.LocatorLed': EquipmentLocatorLed,
            'equipment.Psu': EquipmentPsu,
            'equipment.PsuControl': EquipmentPsuControl,
            'equipment.RackEnclosure': EquipmentRackEnclosure,
            'equipment.RackEnclosureSlot': EquipmentRackEnclosureSlot,
            'equipment.SharedIoModule': EquipmentSharedIoModule,
            'equipment.SwitchCard': EquipmentSwitchCard,
            'equipment.SystemIoController': EquipmentSystemIoController,
            'equipment.Tpm': EquipmentTpm,
            'equipment.Transceiver': EquipmentTransceiver,
            'ether.HostPort': EtherHostPort,
            'ether.NetworkPort': EtherNetworkPort,
            'ether.PhysicalPort': EtherPhysicalPort,
            'ether.PhysicalPortBase': EtherPhysicalPortBase,
            'ether.PortChannel': EtherPortChannel,
            'fault.Instance': FaultInstance,
            'fc.PhysicalPort': FcPhysicalPort,
            'fc.PortChannel': FcPortChannel,
            'firmware.RunningFirmware': FirmwareRunningFirmware,
            'graphics.Card': GraphicsCard,
            'graphics.Controller': GraphicsController,
            'inventory.GenericInventory': InventoryGenericInventory,
            'inventory.GenericInventoryHolder': InventoryGenericInventoryHolder,
            'ls.ServiceProfile': LsServiceProfile,
            'management.Controller': ManagementController,
            'management.Entity': ManagementEntity,
            'management.Interface': ManagementInterface,
            'memory.AbstractUnit': MemoryAbstractUnit,
            'memory.Array': MemoryArray,
            'memory.PersistentMemoryConfigResult': MemoryPersistentMemoryConfigResult,
            'memory.PersistentMemoryConfiguration': MemoryPersistentMemoryConfiguration,
            'memory.PersistentMemoryNamespace': MemoryPersistentMemoryNamespace,
            'memory.PersistentMemoryNamespaceConfigResult': MemoryPersistentMemoryNamespaceConfigResult,
            'memory.PersistentMemoryRegion': MemoryPersistentMemoryRegion,
            'memory.PersistentMemoryUnit': MemoryPersistentMemoryUnit,
            'memory.Unit': MemoryUnit,
            'network.Element': NetworkElement,
            'network.FcZoneInfo': NetworkFcZoneInfo,
            'network.VlanPortInfo': NetworkVlanPortInfo,
            'pci.CoprocessorCard': PciCoprocessorCard,
            'pci.Device': PciDevice,
            'pci.Link': PciLink,
            'pci.Switch': PciSwitch,
            'port.Group': PortGroup,
            'port.InterfaceBase': PortInterfaceBase,
            'port.MacBinding': PortMacBinding,
            'port.Physical': PortPhysical,
            'port.SubGroup': PortSubGroup,
            'processor.Unit': ProcessorUnit,
            'security.Unit': SecurityUnit,
            'storage.BaseArray': StorageBaseArray,
            'storage.BaseArrayController': StorageBaseArrayController,
            'storage.BaseArrayDisk': StorageBaseArrayDisk,
            'storage.Controller': StorageController,
            'storage.DiskGroup': StorageDiskGroup,
            'storage.Enclosure': StorageEnclosure,
            'storage.EnclosureDisk': StorageEnclosureDisk,
            'storage.EnclosureDiskSlotEp': StorageEnclosureDiskSlotEp,
            'storage.FlexFlashController': StorageFlexFlashController,
            'storage.FlexFlashControllerProps': StorageFlexFlashControllerProps,
            'storage.FlexFlashPhysicalDrive': StorageFlexFlashPhysicalDrive,
            'storage.FlexFlashVirtualDrive': StorageFlexFlashVirtualDrive,
            'storage.FlexUtilController': StorageFlexUtilController,
            'storage.FlexUtilPhysicalDrive': StorageFlexUtilPhysicalDrive,
            'storage.FlexUtilVirtualDrive': StorageFlexUtilVirtualDrive,
            'storage.Item': StorageItem,
            'storage.PhysicalDisk': StoragePhysicalDisk,
            'storage.PhysicalDiskExtension': StoragePhysicalDiskExtension,
            'storage.PhysicalDiskUsage': StoragePhysicalDiskUsage,
            'storage.PureArray': StoragePureArray,
            'storage.PureController': StoragePureController,
            'storage.PureDisk': StoragePureDisk,
            'storage.SasExpander': StorageSasExpander,
            'storage.SasPort': StorageSasPort,
            'storage.Span': StorageSpan,
            'storage.VdMemberEp': StorageVdMemberEp,
            'storage.VirtualDrive': StorageVirtualDrive,
            'storage.VirtualDriveExtension': StorageVirtualDriveExtension,
            'top.System': TopSystem,
        }
        if not val:
            return None
        return {'class_id': val}

    attribute_map = {
        'class_id': 'ClassId',  # noqa: E501
        'object_type': 'ObjectType',  # noqa: E501
        'device_mo_id': 'DeviceMoId',  # noqa: E501
        'dn': 'Dn',  # noqa: E501
        'rn': 'Rn',  # noqa: E501
        'account_moid': 'AccountMoid',  # noqa: E501
        'create_time': 'CreateTime',  # noqa: E501
        'domain_group_moid': 'DomainGroupMoid',  # noqa: E501
        'mod_time': 'ModTime',  # noqa: E501
        'moid': 'Moid',  # noqa: E501
        'owners': 'Owners',  # noqa: E501
        'shared_scope': 'SharedScope',  # noqa: E501
        'tags': 'Tags',  # noqa: E501
        'version_context': 'VersionContext',  # noqa: E501
        'ancestors': 'Ancestors',  # noqa: E501
        'parent': 'Parent',  # noqa: E501
        'permission_resources': 'PermissionResources',  # noqa: E501
        'display_names': 'DisplayNames',  # noqa: E501
    }

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, class_id, object_type, *args, **kwargs):  # noqa: E501
        """InventoryBase - a model defined in OpenAPI

        Args:
            class_id (str): The concrete type of this complex type. Its value must be the same as the &#39;objectType&#39; property. The OpenAPI document references this property as a discriminator value.
            object_type (str): The fully-qualified type of this managed object, i.e. the class name. This property is optional. The ObjectType is implied from the URL path. If specified, the value of objectType must match the class name specified in the URL path.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            device_mo_id (str): The database identifier of the registered device of an object.. [optional]  # noqa: E501
            dn (str): The Distinguished Name unambiguously identifies an object in the system.. [optional]  # noqa: E501
            rn (str): The Relative Name uniquely identifies an object within a given context.. [optional]  # noqa: E501
            account_moid (str): The Account ID for this managed object.. [optional]  # noqa: E501
            create_time (datetime): The time when this managed object was created.. [optional]  # noqa: E501
            domain_group_moid (str): The DomainGroup ID for this managed object.. [optional]  # noqa: E501
            mod_time (datetime): The time when this managed object was last modified.. [optional]  # noqa: E501
            moid (str): The unique identifier of this Managed Object instance.. [optional]  # noqa: E501
            owners ([str]): [optional]  # noqa: E501
            shared_scope (str): Intersight provides pre-built workflows, tasks and policies to end users through global catalogs. Objects that are made available through global catalogs are said to have a &#39;shared&#39; ownership. Shared objects are either made globally available to all end users or restricted to end users based on their license entitlement. Users can use this property to differentiate the scope (global or a specific license tier) to which a shared MO belongs.. [optional]  # noqa: E501
            tags ([MoTag]): [optional]  # noqa: E501
            version_context (MoVersionContext): [optional]  # noqa: E501
            ancestors ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            parent (MoBaseMoRelationship): [optional]  # noqa: E501
            permission_resources ([MoBaseMoRelationship], none_type): An array of relationships to moBaseMo resources.. [optional]  # noqa: E501
            display_names (DisplayNames): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        required_args = {
            'class_id': class_id,
            'object_type': object_type,
        }
        # remove args whose value is Null because they are unset
        required_arg_names = list(required_args.keys())
        for required_arg_name in required_arg_names:
            if required_args[required_arg_name] is nulltype.Null:
                del required_args[required_arg_name]
        model_args = {}
        model_args.update(required_args)
        model_args.update(kwargs)
        composed_info = validate_get_composed_info(
            constant_args, model_args, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        unused_args = composed_info[3]

        for var_name, var_value in required_args.items():
            setattr(self, var_name, var_value)
        for var_name, var_value in kwargs.items():
            if var_name in unused_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        not self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              InventoryBaseAllOf,
              MoBaseMo,
          ],
          'oneOf': [
          ],
        }
