# coding: utf-8

"""
    Cisco Intersight

    Cisco Intersight is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. Cisco Intersight provides an integrated and intuitive management experience for resources in the traditional data center as well as at the edge. With flexible deployment options to address complex security needs, getting started with Intersight is quick and easy. Cisco Intersight has deep integration with Cisco UCS and HyperFlex systems allowing for remote deployment, configuration, and ongoing maintenance. The model-based deployment works for a single system in a remote location or hundreds of systems in a data center and enables rapid, standardized configuration and deployment. It also streamlines maintaining those systems whether you are working with small or very large configurations. The Intersight OpenAPI document defines the complete set of properties that are returned in the HTTP response. From that perspective, a client can expect that no additional properties are returned, unless these properties are explicitly defined in the OpenAPI document. However, when a client uses an older version of the Intersight OpenAPI document, the server may send additional properties because the software is more recent than the client. In that case, the client may receive properties that it does not know about. Some generated SDKs perform a strict validation of the HTTP response body against the OpenAPI document. This document was created on 2020-06-30T07:31:54Z.  # noqa: E501

    The version of the OpenAPI document: 1.0.9-1950
    Contact: intersight@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

import nulltype  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from openapi_client.model.asset_device_registration_relationship import AssetDeviceRegistrationRelationship
    from openapi_client.model.cond_hcl_status_detail_relationship import CondHclStatusDetailRelationship
    from openapi_client.model.inventory_base_relationship import InventoryBaseRelationship
    globals()['AssetDeviceRegistrationRelationship'] = AssetDeviceRegistrationRelationship
    globals()['CondHclStatusDetailRelationship'] = CondHclStatusDetailRelationship
    globals()['InventoryBaseRelationship'] = InventoryBaseRelationship


class CondHclStatusAllOf(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('component_status',): {
            'INCOMPLETE': "Incomplete",
            'NOT-FOUND': "Not-Found",
            'NOT-LISTED': "Not-Listed",
            'VALIDATED': "Validated",
            'NOT-EVALUATED': "Not-Evaluated",
        },
        ('hardware_status',): {
            'INCOMPLETE': "Incomplete",
            'NOT-FOUND': "Not-Found",
            'NOT-LISTED': "Not-Listed",
            'VALIDATED': "Validated",
            'NOT-EVALUATED': "Not-Evaluated",
        },
        ('reason',): {
            'MISSING-OS-INFO': "Missing-Os-Info",
            'INCOMPATIBLE-COMPONENTS': "Incompatible-Components",
            'COMPATIBLE': "Compatible",
            'NOT-EVALUATED': "Not-Evaluated",
        },
        ('server_reason',): {
            'MISSING-OS-DRIVER-INFO': "Missing-Os-Driver-Info",
            'INCOMPATIBLE-SERVER': "Incompatible-Server",
            'INCOMPATIBLE-PROCESSOR': "Incompatible-Processor",
            'INCOMPATIBLE-OS-INFO': "Incompatible-Os-Info",
            'INCOMPATIBLE-FIRMWARE': "Incompatible-Firmware",
            'SERVICE-UNAVAILABLE': "Service-Unavailable",
            'SERVICE-ERROR': "Service-Error",
            'NOT-EVALUATED': "Not-Evaluated",
            'INCOMPATIBLE-COMPONENTS': "Incompatible-Components",
            'COMPATIBLE': "Compatible",
        },
        ('software_status',): {
            'INCOMPLETE': "Incomplete",
            'NOT-FOUND': "Not-Found",
            'NOT-LISTED': "Not-Listed",
            'VALIDATED': "Validated",
            'NOT-EVALUATED': "Not-Evaluated",
        },
        ('status',): {
            'INCOMPLETE': "Incomplete",
            'NOT-FOUND': "Not-Found",
            'NOT-LISTED': "Not-Listed",
            'VALIDATED': "Validated",
            'NOT-EVALUATED': "Not-Evaluated",
        },
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'component_status': (str,),  # noqa: E501
            'hardware_status': (str,),  # noqa: E501
            'hcl_firmware_version': (str,),  # noqa: E501
            'hcl_model': (str,),  # noqa: E501
            'hcl_os_vendor': (str,),  # noqa: E501
            'hcl_os_version': (str,),  # noqa: E501
            'hcl_processor': (str,),  # noqa: E501
            'inv_firmware_version': (str,),  # noqa: E501
            'inv_model': (str,),  # noqa: E501
            'inv_os_vendor': (str,),  # noqa: E501
            'inv_os_version': (str,),  # noqa: E501
            'inv_processor': (str,),  # noqa: E501
            'reason': (str,),  # noqa: E501
            'server_reason': (str,),  # noqa: E501
            'software_status': (str,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'details': ([CondHclStatusDetailRelationship], none_type,),  # noqa: E501
            'managed_object': (InventoryBaseRelationship,),  # noqa: E501
            'registered_device': (AssetDeviceRegistrationRelationship,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'component_status': 'ComponentStatus',  # noqa: E501
        'hardware_status': 'HardwareStatus',  # noqa: E501
        'hcl_firmware_version': 'HclFirmwareVersion',  # noqa: E501
        'hcl_model': 'HclModel',  # noqa: E501
        'hcl_os_vendor': 'HclOsVendor',  # noqa: E501
        'hcl_os_version': 'HclOsVersion',  # noqa: E501
        'hcl_processor': 'HclProcessor',  # noqa: E501
        'inv_firmware_version': 'InvFirmwareVersion',  # noqa: E501
        'inv_model': 'InvModel',  # noqa: E501
        'inv_os_vendor': 'InvOsVendor',  # noqa: E501
        'inv_os_version': 'InvOsVersion',  # noqa: E501
        'inv_processor': 'InvProcessor',  # noqa: E501
        'reason': 'Reason',  # noqa: E501
        'server_reason': 'ServerReason',  # noqa: E501
        'software_status': 'SoftwareStatus',  # noqa: E501
        'status': 'Status',  # noqa: E501
        'details': 'Details',  # noqa: E501
        'managed_object': 'ManagedObject',  # noqa: E501
        'registered_device': 'RegisteredDevice',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """CondHclStatusAllOf - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            component_status (str): The overall status for the components found in the HCL. This will provide the HCL validation status for all the components. It can be one of the following. \&quot;Validated\&quot; - all the components hardware/software profiles are listed in the HCL. \&quot;Not-Listed\&quot; - one or more components hardware/software profiles are not listed in the HCL \&quot;Incomplete\&quot; - the components are not evaluated as the server&#39;s software/hardware profiles are not listed in the HCL. \&quot;Not-Evaluated\&quot; - The components are not evaluated against the HCL because it is exempted.. [optional] if omitted the server will use the default value of "Incomplete"  # noqa: E501
            hardware_status (str): The server model, processor and firmware are considered as part of the hardware profile for the server. This will provide the HCL validation status for the hardware profile. For the failure reason see the serverReason property. The status can be one of the following \&quot;Validated\&quot; - The server model, processor and firmware combination is listed in the HCL \&quot;Not-Listed\&quot; - The server model, processor and firmware combination is not listed in the HCL. \&quot;Not-Evaluated\&quot; - The server is not evaluated against the HCL because it is exempted.. [optional] if omitted the server will use the default value of "Incomplete"  # noqa: E501
            hcl_firmware_version (str): The current CIMC version for the server normalized for querying HCL data. It is empty if we are missing this information.. [optional]  # noqa: E501
            hcl_model (str): The managed object&#39;s model to validate normalized for querying HCL data. It is empty if we are missing this information.. [optional]  # noqa: E501
            hcl_os_vendor (str): The OS Vendor for the managed object to validate normalized for querying HCL data. It is empty if we are missing this information.. [optional]  # noqa: E501
            hcl_os_version (str): The OS Version for the managed object to validate normalized for querying HCL data. It is empty if we are missing this information.. [optional]  # noqa: E501
            hcl_processor (str): The managed object&#39;s processor to validate if applicable normalized for querying HCL data. It is empty if we are missing this information.. [optional]  # noqa: E501
            inv_firmware_version (str): The current CIMC version for the server as received from inventory. It is empty if we are missing this information.. [optional]  # noqa: E501
            inv_model (str): The managed object&#39;s model to validate as received from the inventory. It is empty if we are missing this information.. [optional]  # noqa: E501
            inv_os_vendor (str): The OS Vendor for the managed object to validate as received from inventory. It is empty if we are missing this information.. [optional]  # noqa: E501
            inv_os_version (str): The OS Version for the managed object to validate as received from inventory. It is empty if we are missing this information.. [optional]  # noqa: E501
            inv_processor (str): The managed object&#39;s processor to validate if applicable as received from inventory. It is empty if we are missing this information.. [optional]  # noqa: E501
            reason (str): The reason for the HCL status. It will be one of the following \&quot;Missing-Os-Info\&quot; - we are missing os information in the inventory from the device connector \&quot;Incompatible-Components\&quot; - we have 1 or more components with \&quot;Not-Validated\&quot; status \&quot;Compatible\&quot; - all the components have \&quot;Validated\&quot; status. \&quot;Not-Evaluated\&quot; - The server is not evaluated against the HCL because it is exempted.. [optional] if omitted the server will use the default value of "Missing-Os-Info"  # noqa: E501
            server_reason (str): The reason generated by the server&#39;s HCL validation. For HCL the evaluation can be seen in three logical stages 1. Evaluate the server&#39;s hardware status 2. Evaluate the server&#39;s software status 3. Evaluate the server&#39;s components (each component has its own hardware/software evaluation) The evaluation does not proceed to the next stage until the previous stage is evaluated. Therefore there can be only one validation reason. \&quot;Incompatible-Server\&quot; - the server model is not listed in the HCL. \&quot;Incompatible-Processor\&quot; - the server model and processor combination is not listed in HCL. \&quot;Incompatible-Firmware\&quot; - the server model, processor and server firmware is not listed in HCL. \&quot;Missing-Os-Info\&quot; - the os vendor and version is not listed in HCL with the HW profile. \&quot;Incompatible-Os-Info\&quot; - the os vendor and version is not listed in HCL with the HW profile. \&quot;Incompatible-Components\&quot; - there is one or more components with \&quot;Not-Validated\&quot; status \&quot;Service-Unavailable\&quot; - HCL data service is unavailable at the moment (try again later). \&quot;Compatible\&quot; - the server and all its components are validated. \&quot;Not-Evaluated\&quot; - The server is not evaluated against the HCL because it is exempted.. [optional] if omitted the server will use the default value of "Missing-Os-Driver-Info"  # noqa: E501
            software_status (str): The OS vendor and version are considered part of the software profile for the server. This will provide the HCL validation status for the software profile. For the failure reason see the serverReason property. The status can be be one of the following \&quot;Validated\&quot; - The os vendor/version is listed in the HCL for the server model, processor and firmware \&quot;Not-Listed\&quot; - The os vendor/version is not listed in the HCL for the server model, processor and firmware \&quot;Incomplete\&quot; - The inventory is missing os vendor/version and HCL validation was not performed. \&quot;Not-Evaluated\&quot; - The server is not evaluated against the HCL because it is exempted.. [optional] if omitted the server will use the default value of "Incomplete"  # noqa: E501
            status (str): The HCL compatibility status of the managed object. The status can be one of the following \&quot;Incomplete\&quot; - there is no enough information to evaluate against the HCL data \&quot;Validated\&quot; - all components have been evaluated against the HCL and they all have \&quot;Validated\&quot; status \&quot;Not-Listed\&quot; - all components have been evaluated against the HCL and one or more have \&quot;Not-Listed\&quot; status. \&quot;Not-Evaluated\&quot; - server is not evaluated against the HCL because it is exempted.. [optional] if omitted the server will use the default value of "Incomplete"  # noqa: E501
            details ([CondHclStatusDetailRelationship], none_type): An array of relationships to condHclStatusDetail resources.. [optional]  # noqa: E501
            managed_object (InventoryBaseRelationship): [optional]  # noqa: E501
            registered_device (AssetDeviceRegistrationRelationship): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
